@using BlazorContextMenu.Services
@inject IJSRuntime jsRuntime
@inject IBlazorContextMenuService contextMenuService

<h1>Todo List (Right click)</h1>
<ul id="list1">
    @foreach (var item in TodoItems)
    {
        <ContextMenuTrigger Data="item" WrapperTag="li" MenuId="todoItemsMenu" Id="@($"list1-{TodoItems.IndexOf(item)}")">
            <input type="checkbox" @bind="item.IsChecked" readonly /> @item.Text
        </ContextMenuTrigger>
    }
</ul>

<h1>Todo List (Left click)</h1>
<ul id="list2">
    @foreach (var item in TodoItems)
    {
        <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Left" Data="item" WrapperTag="li" MenuId="todoItemsMenu" Id="@($"list2-{TodoItems.IndexOf(item)}")">
            <input type="checkbox" @bind="item.IsChecked" readonly /> @item.Text
        </ContextMenuTrigger>
    }
</ul>

<ContextMenu Id="todoItemsMenu" OnAppearing="@TodoItemsMenuOnAppearing">
    @{
        var currentTodoItem = context.Data as TodoItem;

        <Item id="menuitem-copy" OnClick="CopyClick"> <i class="fas fa-file blue-icon"></i> Copy</Item>
        <Item id="menuitem-check" OnClick="CheckClick" Enabled="!currentTodoItem.IsChecked"> <i class="fas fa-file blue-icon"></i> Check</Item>
        <Item id="menuitem-delete" OnClick="DeleteClick" Visible="currentTodoItem.CanBeDeleted"> <i class="fas fa-trash-alt red-icon"></i> Delete</Item>
        <Item id="menuitem-invisible" Visible="false">I am invisible</Item>
    }
</ContextMenu>

<button id="manualShowBtn" @onclick="BtnClick">Show menu for first item</button>
<div id="app_loaded"></div>

@code{

    async Task BtnClick()
    {
        await contextMenuService.ShowMenu("todoItemsMenu", 50, 25, TodoItems.First());
    }

    void TodoItemsMenuOnAppearing(MenuAppearingEventArgs e)
    {
        var currentTodoItem = e.Data as TodoItem;
        e.PreventShow = !currentTodoItem.CanShowMenu;
    }

    void CopyClick(ItemClickEventArgs e)
    {
        var currentTodoItem = e.Data as TodoItem;
        TodoItems.Add(new TodoItem
        {
            Text = currentTodoItem.Text + " Copy",
            IsChecked = currentTodoItem.IsChecked,
            CanBeDeleted = currentTodoItem.CanBeDeleted
        });
        StateHasChanged();
    }

    void CheckClick(ItemClickEventArgs e)
    {
        var currentTodoItem = e.Data as TodoItem;
        currentTodoItem.IsChecked = true;
        StateHasChanged();
    }

    void DeleteClick(ItemClickEventArgs e)
    {

        var currentTodoItem = e.Data as TodoItem;
        TodoItems.Remove(currentTodoItem);
        StateHasChanged();
    }

    List<TodoItem> TodoItems = new List<TodoItem>
{
        new TodoItem
        {
            Text = "Item 1",
            IsChecked = true
        },
        new TodoItem
        {
            Text="Item 2"
        },
        new TodoItem
        {
            Text="Item 3 (Cannot be deleted)",
            CanBeDeleted = false
        },
         new TodoItem
        {
            Text="Item 4 (Does not show the menu)",
            CanShowMenu = false
        }
    };

    class TodoItem
    {
        public string Text { get; set; }
        public bool IsChecked { get; set; }
        public bool CanBeDeleted { get; set; } = true;
        public bool CanShowMenu { get; set; } = true;
    }

}