@inherits BlazorContextMenu.MenuTreeComponent

@inject BlazorContextMenuSettings Settings
@inject IMenuTreeTraverser MenuTreeTraverser

@namespace BlazorContextMenu

<li @attributes="@Attributes" id="@Id" class="@ClassCalc">
    <hr class="@HrClassCalc"/>
</li>

@code
{
    #region Parameters

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; }

    /// <summary>
    /// Allows you to override the default css class of the <see cref="Separator"/>'s li element, for full customization.
    /// </summary>
    [Parameter]
    public string OverrideDefaultCssClass { get; set; }

    /// <summary>
    /// Allows you to override the default css class of the <see cref="Separator"/>'s hr element, for full customization.
    /// </summary>
    [Parameter]
    public string OverrideDefaultHrCssClass { get; set; }

    /// <summary>
    /// The id of the <see cref="Separator"/>'s li element. This is optional
    /// </summary>
    [Parameter]
    public string Id { get; set; }

    /// <summary>
    /// Additional css class for the <see cref="Separator"/>'s li element. Use this to extend the default css.
    /// </summary>
    [Parameter]
    public string CssClass { get; set; }

    /// <summary>
    /// Additional css class for the <see cref="Separator"/>'s hr element. Use this to extend the default css.
    /// </summary>
    [Parameter]
    public string HrCssClass { get; set; }

    #endregion

    #region Attributes

    protected string Template { get; set; }

    protected string ClassCalc
    {
        get
        {
            BlazorContextMenuTemplate template = Settings.GetTemplate(Template);
            return Helpers.AppendCssClasses(
                OverrideDefaultCssClass ?? template.DefaultCssOverrides.SeparatorCssClass,
                CssClass ?? Settings.GetTemplate(Template).SeparatorCssClass);
        }
    }

    protected string HrClassCalc
    {
        get
        {
            BlazorContextMenuTemplate template = Settings.GetTemplate(Template);
            return Helpers.AppendCssClasses(
                OverrideDefaultHrCssClass ?? template.DefaultCssOverrides.SeparatorHrCssClass,
                HrCssClass ?? Settings.GetTemplate(Template).SeparatorHrCssClass);
        }
    }

    #endregion

    #region Overrides

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (MenuTreeTraverser.GetRootContextMenu(this) is null)
            throw new Exception("Separator component must be a child of a ContextMenu component");

        ContextMenuBase parentMenu = MenuTreeTraverser.GetClosestContextMenu(this);
        Template = parentMenu.GetActiveTemplate();
    }

    #endregion
}